USE [master]
GO

DROP DATABASE IF EXISTS BigLog;

/****** Object:  Database [BigLog]    Script Date: 2/6/2017 4:36:57 PM ******/
CREATE DATABASE [BigLog]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'BigLog', 
	FILENAME = N'C:\DATA\BigLog.mdf' , 
	SIZE = 1024MB , 
	MAXSIZE = UNLIMITED, 
	FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'BigLog_log', 
	FILENAME = N'C:\Log\BigLog_log.ldf' , 
	SIZE = 4096MB , 
	MAXSIZE = 2048GB , 
	FILEGROWTH = 1024MB )
GO

ALTER DATABASE [BigLog] SET COMPATIBILITY_LEVEL = 130
GO

IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [BigLog].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO

ALTER DATABASE [BigLog] SET ANSI_NULL_DEFAULT OFF 
GO

ALTER DATABASE [BigLog] SET ANSI_NULLS OFF 
GO

ALTER DATABASE [BigLog] SET ANSI_PADDING OFF 
GO

ALTER DATABASE [BigLog] SET ANSI_WARNINGS OFF 
GO

ALTER DATABASE [BigLog] SET ARITHABORT OFF 
GO

ALTER DATABASE [BigLog] SET AUTO_CLOSE OFF 
GO

ALTER DATABASE [BigLog] SET AUTO_SHRINK OFF 
GO

ALTER DATABASE [BigLog] SET AUTO_UPDATE_STATISTICS ON 
GO

ALTER DATABASE [BigLog] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO

ALTER DATABASE [BigLog] SET CURSOR_DEFAULT  GLOBAL 
GO

ALTER DATABASE [BigLog] SET CONCAT_NULL_YIELDS_NULL OFF 
GO

ALTER DATABASE [BigLog] SET NUMERIC_ROUNDABORT OFF 
GO

ALTER DATABASE [BigLog] SET QUOTED_IDENTIFIER OFF 
GO

ALTER DATABASE [BigLog] SET RECURSIVE_TRIGGERS OFF 
GO

ALTER DATABASE [BigLog] SET  DISABLE_BROKER 
GO

ALTER DATABASE [BigLog] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO

ALTER DATABASE [BigLog] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO

ALTER DATABASE [BigLog] SET TRUSTWORTHY OFF 
GO

ALTER DATABASE [BigLog] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO

ALTER DATABASE [BigLog] SET PARAMETERIZATION SIMPLE 
GO

ALTER DATABASE [BigLog] SET READ_COMMITTED_SNAPSHOT OFF 
GO

ALTER DATABASE [BigLog] SET HONOR_BROKER_PRIORITY OFF 
GO

ALTER DATABASE [BigLog] SET RECOVERY FULL 
GO

ALTER DATABASE [BigLog] SET  MULTI_USER 
GO

ALTER DATABASE [BigLog] SET PAGE_VERIFY CHECKSUM  
GO

ALTER DATABASE [BigLog] SET DB_CHAINING OFF 
GO

ALTER DATABASE [BigLog] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO

ALTER DATABASE [BigLog] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO

ALTER DATABASE [BigLog] SET DELAYED_DURABILITY = DISABLED 
GO

ALTER DATABASE [BigLog] SET QUERY_STORE = OFF
GO

USE [BigLog]
GO

ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
GO

ALTER DATABASE [BigLog] SET  READ_WRITE 
GO

BACKUP DATABASE BigLog TO DISK = 'C:\Backup\BigLog_FULL.bak' WITH COMPRESSION, STATS = 5;

EXEC sp_cycle_errorlog;

USE [master]
GO
DROP DATABASE IF EXISTS SmallLog;

/****** Object:  Database [SmallLog]    Script Date: 2/6/2017 4:48:50 PM ******/
CREATE DATABASE [SmallLog]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'SmallLog', 
	FILENAME = N'C:\DATA\SmallLog.mdf' , 
	SIZE = 1024MB , 
	MAXSIZE = UNLIMITED, 
	FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'SmallLog_log', 
	FILENAME = N'C:\Log\SmallLog_log.ldf' , 
	SIZE = 8192KB , 
	MAXSIZE = 2048GB , 
	FILEGROWTH = 65536KB)
GO

ALTER DATABASE [SmallLog] SET COMPATIBILITY_LEVEL = 130
GO

IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [SmallLog].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO

ALTER DATABASE [SmallLog] SET ANSI_NULL_DEFAULT OFF 
GO

ALTER DATABASE [SmallLog] SET ANSI_NULLS OFF 
GO

ALTER DATABASE [SmallLog] SET ANSI_PADDING OFF 
GO

ALTER DATABASE [SmallLog] SET ANSI_WARNINGS OFF 
GO

ALTER DATABASE [SmallLog] SET ARITHABORT OFF 
GO

ALTER DATABASE [SmallLog] SET AUTO_CLOSE OFF 
GO

ALTER DATABASE [SmallLog] SET AUTO_SHRINK OFF 
GO

ALTER DATABASE [SmallLog] SET AUTO_UPDATE_STATISTICS ON 
GO

ALTER DATABASE [SmallLog] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO

ALTER DATABASE [SmallLog] SET CURSOR_DEFAULT  GLOBAL 
GO

ALTER DATABASE [SmallLog] SET CONCAT_NULL_YIELDS_NULL OFF 
GO

ALTER DATABASE [SmallLog] SET NUMERIC_ROUNDABORT OFF 
GO

ALTER DATABASE [SmallLog] SET QUOTED_IDENTIFIER OFF 
GO

ALTER DATABASE [SmallLog] SET RECURSIVE_TRIGGERS OFF 
GO

ALTER DATABASE [SmallLog] SET  DISABLE_BROKER 
GO

ALTER DATABASE [SmallLog] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO

ALTER DATABASE [SmallLog] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO

ALTER DATABASE [SmallLog] SET TRUSTWORTHY OFF 
GO

ALTER DATABASE [SmallLog] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO

ALTER DATABASE [SmallLog] SET PARAMETERIZATION SIMPLE 
GO

ALTER DATABASE [SmallLog] SET READ_COMMITTED_SNAPSHOT OFF 
GO

ALTER DATABASE [SmallLog] SET HONOR_BROKER_PRIORITY OFF 
GO

ALTER DATABASE [SmallLog] SET RECOVERY FULL 
GO

ALTER DATABASE [SmallLog] SET  MULTI_USER 
GO

ALTER DATABASE [SmallLog] SET PAGE_VERIFY CHECKSUM  
GO

ALTER DATABASE [SmallLog] SET DB_CHAINING OFF 
GO

ALTER DATABASE [SmallLog] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO

ALTER DATABASE [SmallLog] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO

ALTER DATABASE [SmallLog] SET DELAYED_DURABILITY = DISABLED 
GO

ALTER DATABASE [SmallLog] SET QUERY_STORE = OFF
GO

USE [SmallLog]
GO

ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
GO

ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO

ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
GO

ALTER DATABASE [SmallLog] SET  READ_WRITE 
GO

BACKUP DATABASE SmallLog TO DISK = 'C:\Backup\SmallLog_FULL.bak' WITH COMPRESSION, STATS = 5;

EXEC sp_cycle_errorlog;

USE SmallLog;

DROP TABLE IF EXISTS TestTable;

CREATE TABLE TestTable
(RowID INT IDENTITY(1,1)
,FirstName NVARCHAR(50)
,LastName NVARCHAR(50)
,Comments NVARCHAR(1000));

CREATE UNIQUE CLUSTERED INDEX IX_TestTable_RowID ON TestTable(RowID);

USE BigLog;

DROP TABLE IF EXISTS TestTable;

CREATE TABLE TestTable
(RowID INT IDENTITY(1,1)
,FirstName NVARCHAR(50)
,LastName NVARCHAR(50)
,Comments NVARCHAR(1000));

CREATE UNIQUE CLUSTERED INDEX IX_TestTable_RowID ON TestTable(RowID);

USE BigLog;
-- =============================================
-- Create basic stored procedure template
-- =============================================

-- Drop stored procedure if it already exists
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'dbo'
     AND SPECIFIC_NAME = N'InsertBigLogTable' 
)
   DROP PROCEDURE dbo.InsertBigLogTable
GO

CREATE PROCEDURE dbo.InsertBigLogTable
	@NumberOfRows INT = 1000000
AS
SET NOCOUNT ON;

DECLARE @loopcount INT = 1;

WHILE @loopcount <= @NumberOfRows
BEGIN

	INSERT INTO BigLog.dbo.TestTable
	(FirstName
	,LastName
	,Comments)
	VALUES
	('Steve'
	,'Jones'
	,REPLICATE('This is a comment', 58));

	SELECT @loopcount += 1;

END
GO

USE SmallLog;
-- =============================================
-- Create basic stored procedure template
-- =============================================

-- Drop stored procedure if it already exists
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'dbo'
     AND SPECIFIC_NAME = N'InsertSmallLogTable' 
)
   DROP PROCEDURE dbo.InsertSmallLogTable
GO

CREATE PROCEDURE dbo.InsertSmallLogTable
	@NumberOfRows INT = 1000000
AS
SET NOCOUNT ON;

DECLARE @loopcount INT = 1;

WHILE @loopcount <= @NumberOfRows
BEGIN

	INSERT INTO SmallLog.dbo.TestTable
	(FirstName
	,LastName
	,Comments)
	VALUES
	('Steve'
	,'Jones'
	,REPLICATE('This is a comment', 58));

	SELECT @loopcount += 1;

END
GO




